{"version":3,"sources":["Modules/Movies/movies-listing.js","Modules/Movies/movies-thumbnail.js"],"names":["MovieComponent","lazy","Breadcrumbs","connect","data","Movies","movieDiscoverLoaded","props","useEffect","className","title","length","map","item","index","backdrop_path","key","toString","MovieThumbnail","onClick","vote","backdrop","src","MovieLoadingThumbnail","node","i","push","React","memo","prevProps","nextProps"],"mappings":"wGAAA,gEAOMA,EAAiBC,gBAAK,kBAAM,kCAC5BC,EAAcD,gBAAK,kBAAM,iCAqChBE,uBALH,SAAC,GAEX,MAAO,CAAEC,KAFiB,EAAbC,OACLD,QAIkB,CAAEE,yBAAfH,EA5Bf,SAAsBI,GAAQ,IACpBH,EAA8BG,EAA9BH,KAAME,EAAwBC,EAAxBD,oBAKd,OAJAE,qBAAU,WACRF,MACC,IAGD,yBAAKG,UAAU,aACb,kBAACP,EAAD,CAAaQ,MAAM,UACH,GAAfN,EAAKO,OACJ,kBAAC,wBAAD,MAEAP,EAAKQ,KACH,SAACC,EAAMC,GAAP,OACED,EAAKE,eACH,kBAACf,EAAD,iBAAoBa,EAApB,CAA0BG,IAAKF,EAAMG,sB,gCChCnD,sIAYO,SAASC,EAAT,GAA6D,IAAnCC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,KAAMV,EAAmB,EAAnBA,MAAOW,EAAY,EAAZA,SACrD,OACE,yBAAKZ,UAAU,kBAAkBU,QAASA,GACxC,0BAAMV,UAAU,wBAAwBW,GACxC,yBAAKX,UAAU,UACb,0BAAMA,UAAU,yBAAyBC,IAE3C,yBACED,UAAU,0BACVa,IAAG,0CAAqCD,MAOzC,IAAME,EAAwB,WAEnC,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAKE,KACH,yBAAKjB,UAAU,0BAA0BO,IAAKS,EAAER,cAGpD,OAAOO,GAUMG,cAAMC,KAAKV,GAxCE,SAACW,EAAWC,GACtC,OAAOD,EAAUnB,QAAUoB,EAAUpB,U","file":"static/js/9.053fc2b0.chunk.js","sourcesContent":["import React, { useEffect, lazy, useState } from \"react\";\r\nimport { MovieLoadingThumbnail } from \"./movies-thumbnail\";\r\nimport { httpGet } from \"../../Helper/HttpFetch\";\r\nimport \"../Component/container.scss\";\r\nimport { movieDiscoverLoaded } from \"./movies-action\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst MovieComponent = lazy(() => import(\"./movies-component\"));\r\nconst Breadcrumbs = lazy(() => import(\"../Component/breadcrumbs\"));\r\n\r\n// Movie Listing render multiple movie component\r\n// including breadcrumbs with title on props.\r\n// before this component renders it will going to\r\n// fetch data throug api.\r\n// we use local state to handle state.\r\n// avoid to use local state render to many data,\r\n// we move to reducers state data inside Movies\r\nfunction MovieListing(props) {\r\n  const { data, movieDiscoverLoaded } = props;\r\n  useEffect(() => {\r\n    movieDiscoverLoaded();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Breadcrumbs title=\"Movie\" />\r\n      {data.length == 0 ? (\r\n        <MovieLoadingThumbnail />\r\n      ) : (\r\n        data.map(\r\n          (item, index) =>\r\n            item.backdrop_path && (\r\n              <MovieComponent {...item} key={index.toString()} />\r\n            )\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mtp = ({ Movies }) => {\r\n  const { data } = Movies;\r\n  return { data };\r\n};\r\n\r\nexport default connect(mtp, { movieDiscoverLoaded })(MovieListing);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./movies-thumbnail.scss\";\r\n\r\n// Check props use to memo\r\nconst propsMovieThumbnail = (prevProps, nextProps) => {\r\n  return prevProps.title === nextProps.title;\r\n};\r\n\r\n// Render the movie thumbnails component\r\n// Avoid to render bigger images, we use w500 as image size\r\n// thumbnail movies backdrop\r\nexport function MovieThumbnail({ onClick, vote, title, backdrop }) {\r\n  return (\r\n    <div className=\"movie-thumbnail\" onClick={onClick}>\r\n      <span className=\"movie-thumbnail-vote\">{vote}</span>\r\n      <div className=\"shadow\">\r\n        <span className=\"movie-thumbnail-title\">{title}</span>\r\n      </div>\r\n      <img\r\n        className=\"movie-thumnail-backdrop\"\r\n        src={`https://image.tmdb.org/t/p/w500/${backdrop}`}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// Component Loading Movie Thumbnail\r\nexport const MovieLoadingThumbnail = () => {\r\n  const node = [];\r\n  for (let i = 0; i < 10; i++) {\r\n    node.push(\r\n      <div className=\"movie-thumbnail-loading\" key={i.toString()}></div>\r\n    );\r\n  }\r\n  return node;\r\n};\r\n\r\nMovieThumbnail.propTypes = {\r\n  onClick: PropTypes.func,\r\n  vote: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  backdrop: PropTypes.string\r\n};\r\n\r\nexport default React.memo(MovieThumbnail, propsMovieThumbnail);\r\n"],"sourceRoot":""}