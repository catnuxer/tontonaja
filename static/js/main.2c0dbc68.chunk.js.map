{"version":3,"sources":["Modules/Countries/countries-action.js","Modules/Countries/countries-reducer.js","Env.js","Helper/HttpFetch.js","Modules/Countries/countries-saga.js","RootSagas/index.js","Store/index.js","App.js","RootReducers/index.js","serviceWorker.js","index.js"],"names":["COUNTRY_LOADED","SET_COUNTRY","countryLoaded","type","setCountry","country","response","initState","state","action","apiDomain","apiKey","httpGet","uri","a","header","fetch","method","headers","Authorization","resp","__getCountries","getCountries","rootSaga","call","console","log","json","put","select","Countries","countries","takeEvery","fork","all","SagaCounties","history","createBrowserHistory","composeEnhancers","compose","sagaMiddleware","createSagaMiddleware","routeMiddleware","routerMiddleware","middlewares","ConnectedHome","lazy","ConnectedMovie","store","createStore","combineReducers","router","connectRouter","applyMiddleware","run","configureStore","location","process","MainApp","context","fallback","exact","path","render","to","staticContext","props","App","ReactReduxContext","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2c0dbc68.chunk.js","sourcesContent":["export const COUNTRY_LOADED = \"Countries/country_loaded\";\r\nexport const SET_COUNTRY = \"Countries/set_country\";\r\n\r\nexport const countryLoaded = () => ({\r\n  type: COUNTRY_LOADED\r\n});\r\n\r\nexport const setCountry = country => ({\r\n  type: SET_COUNTRY,\r\n  response: country\r\n});\r\n","import { SET_COUNTRY } from \"./countries-action\";\r\n\r\nconst initState = {\r\n  country: []\r\n};\r\n\r\nexport default (state = initState, action) => {\r\n  switch (action.type) {\r\n    case SET_COUNTRY:\r\n      return {\r\n        ...state,\r\n        country: action.response\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// I think about this environment\r\n// Its better save the domain api key to node environment\r\nconst apiDomain =\r\n  process.env.NODE_ENV === \"development\"\r\n    ? \"https://api.themoviedb.org\"\r\n    : \"https://api.themoviedb.org\";\r\nconst apiKey =\r\n  process.env.NODE_ENV === \"development\"\r\n    ? \"eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwYWEyMDk4YjUwMjdjY2UzNmRlMTg5OTA2MGUwODllZiIsInN1YiI6IjVlN2JkMWIwYWIxYmM3NTg3NGMxMmUwMSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.3XSdx8E5BgQmF2sHpB_q4LVW7fibcjdPFyN6KOGByws\"\r\n    : \"eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwYWEyMDk4YjUwMjdjY2UzNmRlMTg5OTA2MGUwODllZiIsInN1YiI6IjVlN2JkMWIwYWIxYmM3NTg3NGMxMmUwMSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.3XSdx8E5BgQmF2sHpB_q4LVW7fibcjdPFyN6KOGByws\";\r\n\r\nexport { apiDomain, apiKey };\r\n","import { apiDomain, apiKey } from \"../Env\";\r\n/**\r\n * Http Fetch Request POST Method\r\n * @param {String} uri\r\n * @param {Object} payload\r\n * @param {Object} header\r\n */\r\nconst httpPost = async (uri, payload, header = {}) => {\r\n  let resp = await fetch(`${apiDomain}${uri}`, {\r\n    body: JSON.stringify(payload),\r\n    method: \"POST\",\r\n    headers: {\r\n      ...header,\r\n      Authorization: `Bearer ${apiKey}`,\r\n      \"content-type\": \"application/json\"\r\n    }\r\n  });\r\n  return resp;\r\n};\r\n\r\n/**\r\n * Http Fetch Request GET Method\r\n * @param {String} uri\r\n * @param {Object} header\r\n */\r\nconst httpGet = async (uri, header = {}) => {\r\n  let resp = await fetch(`${apiDomain}${uri}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      ...header,\r\n      Authorization: `Bearer ${apiKey}`,\r\n      \"content-type\": \"application/json\"\r\n    }\r\n  });\r\n  return resp;\r\n};\r\n\r\nexport { httpGet, httpPost };\r\n","import { all, fork, takeEvery, select, put, call } from \"redux-saga/effects\";\r\nimport { httpGet } from \"../../Helper/HttpFetch\";\r\nimport { COUNTRY_LOADED, setCountry } from \"./countries-action\";\r\nfunction* __getCountries() {\r\n  try {\r\n    const uri = \"/3/configuration/countries\";\r\n    const response = yield call(httpGet, uri);\r\n    console.log(\"response __getCountries\", response);\r\n    const json = yield call([response, response.json]);\r\n    console.log(\"json __getCountries\", json);\r\n    yield put(setCountry(json));\r\n    const countries = yield select(state => state.Countries);\r\n    console.log(\"countries\", countries);\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport function* getCountries() {\r\n  yield takeEvery(COUNTRY_LOADED, __getCountries);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield fork(getCountries);\r\n}\r\n","import { all, fork } from \"redux-saga/effects\";\r\nimport SagaCounties from \"../Modules/Countries/countries-saga\";\r\n\r\nexport default function*() {\r\n  yield all([fork(SagaCounties)]);\r\n}\r\n","import { createBrowserHistory } from \"history\";\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport { routerMiddleware } from \"connected-react-router\";\r\nimport reducer from \"../RootReducers\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"../RootSagas\";\r\nexport const history = createBrowserHistory();\r\n\r\nconst composeEnhancers = compose;\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst routeMiddleware = routerMiddleware(history);\r\nconst middlewares = [sagaMiddleware];\r\nif (process.env.NODE_ENV === `development`) {\r\n  const { logger } = require(`redux-logger`);\r\n\r\n  middlewares.push(logger);\r\n}\r\n\r\nexport default function configureStore(initState) {\r\n  const store = createStore(\r\n    reducer(history),\r\n    initState,\r\n    composeEnhancers(\r\n      applyMiddleware(...middlewares),\r\n      applyMiddleware(routeMiddleware)\r\n    )\r\n  );\r\n  sagaMiddleware.run(rootSaga);\r\n  if (module.hot) {\r\n    module.hot.accept(\"../RootReducers/index\", () => {\r\n      const nextReducer = require(\"../RootReducers/index\");\r\n      store.replaceReducer(nextReducer);\r\n    });\r\n  }\r\n  return store;\r\n}\r\n","import React, { Suspense, lazy } from \"react\";\r\nimport { Provider, ReactReduxContext } from \"react-redux\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport { ConnectedRouter } from \"connected-react-router\";\r\nimport configureStore, { history } from \"./Store\";\r\n// import { ConnectedHome } from \"./Modules/Home\";\r\n// import { ConnectedMovie } from \"./Modules/Movie\";\r\nimport Loadable from \"react-loadable\";\r\n\r\nconst ConnectedHome = lazy(() => import(\"./Modules/Home\"));\r\nconst ConnectedMovie = lazy(() => import(\"./Modules/Movie\"));\r\n\r\nconst store = configureStore();\r\nconst location = `${process.env.PUBLIC_URL}`;\r\n\r\nfunction MainApp({ history, context }) {\r\n  console.log(\"MainApp\", { history, context });\r\n  return (\r\n    <ConnectedRouter history={history} context={context}>\r\n      <Suspense fallback={<div>Loading App...</div>}>\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path={`${location}/`}\r\n            render={() => <Redirect to={`${location}/home`} />}\r\n          />\r\n          <Route\r\n            path={`${location}/home`}\r\n            render={({ staticContext, ...props }) => (\r\n              <ConnectedHome {...props} />\r\n            )}\r\n          />\r\n          <Route\r\n            path={`${location}/movie`}\r\n            render={({ staticContext, ...props }) => (\r\n              <ConnectedMovie {...props} />\r\n            )}\r\n          />\r\n        </Switch>\r\n      </Suspense>\r\n    </ConnectedRouter>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store} context={ReactReduxContext}>\r\n      <MainApp history={history} context={ReactReduxContext} />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport { connectRouter } from \"connected-react-router\";\r\nimport Countries from \"../Modules/Countries/countries-reducer\";\r\n\r\nexport default history =>\r\n  combineReducers({\r\n    router: connectRouter(history),\r\n    Countries\r\n  });\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}