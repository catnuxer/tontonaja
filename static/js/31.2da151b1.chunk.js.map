{"version":3,"sources":["Modules/Search/search-popup-component.js","Modules/Genres/genres-helper.js"],"names":["ColorLinearProgress","withStyles","colorPrimary","backgroundColor","barColorPrimary","LinearProgress","LoadingSearch","map","item","className","key","toString","SearchResult","props","useHistory","data","index","backdrop_path","onClick","onClickResult","src","vote_average","title","substring","arr","genre","node","res","getGenreName","length","id","name","push","renderGenre","genre_ids","overview","SearchForm","React","forwardRef","ref","loading","genres","input","result","filter","i"],"mappings":"yGAAA,qEAOMA,GAPN,MAO4BC,YAAW,CACrCC,aAAc,CACZC,gBAAiB,WAEnBC,gBAAiB,CACfD,gBAAiB,YALOF,CAOzBI,MAEH,SAASC,IACP,MAAO,CAAC,EAAG,GAAGC,KAAI,SAAAC,GAChB,OACE,yBAAKC,UAAU,iBAAiBC,IAAKF,EAAKG,YACxC,yBAAKF,UAAU,YACb,yBAAKA,UAAU,mCACf,yBAAKA,UAAU,4BAEjB,yBAAKA,UAAU,QACb,yBAAKA,UAAU,0BACf,yBAAKA,UAAU,0BACf,yBAAKA,UAAU,6BACf,yBAAKA,UAAU,eACb,kBAACT,EAAD,YA8BZ,SAASY,EAAaC,GACNC,cAGd,OAFiBD,EAATE,KAEIR,KAAI,SAACC,EAAMQ,GACrB,OACER,EAAKS,eACH,yBACER,UAAU,iBACVC,IAAKM,EAAML,WACXO,QAAS,kBAAML,EAAMM,cAAcX,KAEnC,yBAAKC,UAAU,YACb,yBAAKA,UAAU,kBACb,yBACEW,IAAG,0CAAqCZ,EAAKS,kBAGjD,yBAAKR,UAAU,UACb,2BAAID,EAAKa,gBAGb,yBAAKZ,UAAU,QACb,yBAAKA,UAAU,SACb,2BAAID,EAAKc,MAAMC,UAAU,EAAG,MAE9B,yBAAKd,UAAU,SA/C3B,SAAqBe,EAAKC,GACxB,IAAIC,EAAO,GACLC,EAAMC,YAAaH,EAAOD,GAChC,OAAmB,IAAfG,EAAIE,OAEJ,0BAAMpB,UAAU,QAAQC,IAAKiB,EAAI,GAAGG,GAAGnB,YACpCgB,EAAI,GAAGI,OAIZJ,EAAIpB,KAAI,SAAAC,GACNkB,EAAKM,KACH,0BAAMvB,UAAU,QAAQC,IAAKF,EAAKsB,GAAGnB,YAClCH,EAAKuB,UAKPL,GA8BMO,CAAYzB,EAAK0B,UAAWrB,EAAMY,QAErC,yBAAKhB,UAAU,YACb,2BAAID,EAAK2B,SAASZ,UAAU,EAAG,YAU7C,IAAMa,EAAaC,IAAMC,YAAW,SAACzB,EAAO0B,GAC1C,OACE,yBAAK9B,UAAU,cAAc8B,IAAKA,GAC/B1B,EAAM2B,QACL,kBAAClC,EAAD,MAEA,kBAACM,EAAD,CACEG,KAAMF,EAAME,KACZU,MAAOZ,EAAMY,MACbN,cAAe,SAAAX,GAAI,OAAIK,EAAMM,cAAcX,UAOtC4B,a,gCCnHf,kCAOO,IAAMR,EAAe,SAACa,EAAQC,GACnC,IAAMC,EAAS,GAEf,GAAqB,IAAjBD,EAAMb,OAAc,OAAO,EAC/B,GAAqB,IAAjBa,EAAMb,OAAc,OAAOY,EAAOG,QAAO,SAAAnB,GAAK,OAAIA,EAAMK,KAAOY,EAAM,MACzE,IAL6C,eAKpCG,GACPJ,EAAOlC,KAAI,SAAAC,GACLA,EAAKsB,KAAOY,EAAMG,IACpBF,EAAOX,KAAKxB,OAHTqC,EAAI,EAAGA,EAAIH,EAAMb,OAAQgB,IAAM,EAA/BA,GAOT,OAAOF","file":"static/js/31.2da151b1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./search-component.scss\";\r\nimport { getGenreName } from \"../Genres/genres-helper\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { location } from \"../../Env\";\r\nconst ColorLinearProgress = withStyles({\r\n  colorPrimary: {\r\n    backgroundColor: \"#b2dfdb\"\r\n  },\r\n  barColorPrimary: {\r\n    backgroundColor: \"#17b353\"\r\n  }\r\n})(LinearProgress);\r\n\r\nfunction LoadingSearch() {\r\n  return [1, 2].map(item => {\r\n    return (\r\n      <div className=\"search-results\" key={item.toString()}>\r\n        <div className=\"backdrop\">\r\n          <div className=\"image-backdrop loading-results\"></div>\r\n          <div className=\"rating loading-results\"></div>\r\n        </div>\r\n        <div className=\"info\">\r\n          <div className=\"title loading-results\"></div>\r\n          <div className=\"genre loading-results\"></div>\r\n          <div className=\"overview loading-results\"></div>\r\n          <div className=\"loading-bar\">\r\n            <ColorLinearProgress />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n}\r\n\r\n// Render Genre Inforation in search popup component\r\nfunction renderGenre(arr, genre) {\r\n  let node = [];\r\n  const res = getGenreName(genre, arr);\r\n  if (res.length === 1) {\r\n    return (\r\n      <span className=\"genre\" key={res[0].id.toString()}>\r\n        {res[0].name}\r\n      </span>\r\n    );\r\n  } else {\r\n    res.map(item => {\r\n      node.push(\r\n        <span className=\"genre\" key={item.id.toString()}>\r\n          {item.name}\r\n        </span>\r\n      );\r\n    });\r\n  }\r\n  return node;\r\n}\r\n\r\nfunction SearchResult(props) {\r\n  let history = useHistory();\r\n  const { data } = props;\r\n\r\n  return data.map((item, index) => {\r\n    return (\r\n      item.backdrop_path && (\r\n        <div\r\n          className=\"search-results\"\r\n          key={index.toString()}\r\n          onClick={() => props.onClickResult(item)}\r\n        >\r\n          <div className=\"backdrop\">\r\n            <div className=\"image-backdrop\">\r\n              <img\r\n                src={`https://image.tmdb.org/t/p/w500/${item.backdrop_path}`}\r\n              />\r\n            </div>\r\n            <div className=\"rating\">\r\n              <p>{item.vote_average}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"info\">\r\n            <div className=\"title\">\r\n              <p>{item.title.substring(0, 30)}</p>\r\n            </div>\r\n            <div className=\"genre\">\r\n              {renderGenre(item.genre_ids, props.genre)}\r\n            </div>\r\n            <div className=\"overview\">\r\n              <p>{item.overview.substring(0, 100)}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    );\r\n  });\r\n}\r\n\r\n// Form Search Popup\r\nconst SearchForm = React.forwardRef((props, ref) => {\r\n  return (\r\n    <div className=\"search-form\" ref={ref}>\r\n      {props.loading ? (\r\n        <LoadingSearch />\r\n      ) : (\r\n        <SearchResult\r\n          data={props.data}\r\n          genre={props.genre}\r\n          onClickResult={item => props.onClickResult(item)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default SearchForm;\r\n","/**\r\n * Produce as an array related with\r\n * state movies from reducers Genres and\r\n * input from array genre_ids of movie objects\r\n * @param {Array} genres\r\n * @param {Array} input\r\n */\r\nexport const getGenreName = (genres, input) => {\r\n  const result = [];\r\n\r\n  if (input.length === 0) return false;\r\n  if (input.length === 1) return genres.filter(genre => genre.id === input[0]);\r\n  for (let i = 0; i < input.length; i++) {\r\n    genres.map(item => {\r\n      if (item.id === input[i]) {\r\n        result.push(item);\r\n      }\r\n    });\r\n  }\r\n  return result;\r\n};\r\n"],"sourceRoot":""}