{"version":3,"sources":["Modules/Movies/movies-api.js","Modules/Home/home-carousel.js","Modules/Movies/movies-suggestion.js","Modules/Genres/genres-helper.js","Modules/Movies/movies-section.js","Modules/Home/index.js","Modules/Movies/movies-thumbnail.js"],"names":["fetchDetailMovie","movieId","a","uri","httpGet","response","status","json","loaded","ChildrenCarousel","props","history","useHistory","handleClick","useCallback","item","id","resp","console","log","setDetailMovie","push","pathname","location","search","state","className","title","overview","substring","onClick","backdrop_path","src","CarouselComponent","autoPlay","timer","animation","indicators","autoBind","this","banner","movie_loaded","map","index","key","loading","React","Component","connect","Movies","MovieComponent","lazy","Genres","suggestion","genreMovie","movie","genre","genres","input","result","length","filter","i","getGenreName","genre_ids","genre_movie","toString","PanelSection","setMovieSuggestionGenre","menu","children","ChildSectionMovie","Children","child","data","movieLoaded","useEffect","MovieThumbnail","vote","backdrop","MovieLoadingThumbnail","node","memo","prevProps","nextProps"],"mappings":"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","file":"static/js/6.b1871d6a.chunk.js","sourcesContent":["import { httpGet } from \"../../Helper/HttpFetch\";\r\n\r\n// Try to fetching detail movie before\r\n// push to route movie\r\nexport async function fetchDetailMovie(movieId) {\r\n  const uri = `/3/movie/${movieId}?append_to_response=video,images,credits,jobs`;\r\n  const response = await httpGet(uri);\r\n  if (response.status === 200) {\r\n    const json = await response.json();\r\n    json.loaded = true;\r\n    return json;\r\n  }\r\n  return false;\r\n}\r\n","import React, { useCallback } from \"react\";\r\nimport Carousel from \"react-material-ui-carousel\";\r\nimport autoBind from \"auto-bind\";\r\nimport \"./home-carousel.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { location } from \"../../Env\";\r\nimport { fetchDetailMovie } from \"../Movies/movies-api\";\r\nimport { setDetailMovie } from \"../Movies/movies-action\";\r\nfunction ChildrenCarousel(props) {\r\n  let history = useHistory();\r\n  const handleClick = useCallback(async () => {\r\n    const resp = await fetchDetailMovie(props.item.id);\r\n    console.log(\"id movie carousel\", props.item.id);\r\n    if (resp !== false) {\r\n      props.setDetailMovie(resp);\r\n      history.push({\r\n        pathname: `${location}/movie/detail`,\r\n        search: `?id=${props.item.id}`,\r\n        state: { movieId: props.item.id }\r\n      });\r\n    }\r\n  });\r\n  return (\r\n    <div className=\"carousel-banner\">\r\n      <div className=\"carousel-content\">\r\n        <h1 className=\"carousel-title\">{props.item.title}</h1>\r\n        <p className=\"carousel-caption\">\r\n          {props.item && props.item.overview\r\n            ? props.item.overview.substring(0, 250)\r\n            : \"\"}{\" \"}\r\n          ...\r\n        </p>\r\n        <button className=\"carousel-button\" onClick={handleClick}>\r\n          Watch Now\r\n        </button>\r\n      </div>\r\n      {props.item.backdrop_path && (\r\n        <img\r\n          src={`https://image.tmdb.org/t/p/original/${props.item.backdrop_path}`}\r\n          className=\"carousel-image\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n/***\r\n * Render carousel component only have backdrop_path\r\n *\r\n */\r\nclass CarouselComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      autoPlay: true,\r\n      timer: 1000,\r\n      animation: \"slide\",\r\n      indicators: false\r\n    };\r\n\r\n    autoBind(this);\r\n  }\r\n\r\n  loading() {\r\n    return <div className=\"carousel-loading\"></div>;\r\n  }\r\n\r\n  render() {\r\n    const { banner, movie_loaded, setDetailMovie } = this.props;\r\n    if (!movie_loaded) return this.loading();\r\n    return (\r\n      <Carousel\r\n        className=\"carousel\"\r\n        autoPlay={this.state.autoPlay}\r\n        timer={this.state.timer}\r\n        animation={this.state.animation}\r\n        indicators={this.state.indicators}\r\n      >\r\n        {banner.map((item, index) => {\r\n          return (\r\n            item.backdrop_path && (\r\n              <ChildrenCarousel\r\n                item={item}\r\n                key={index}\r\n                setDetailMovie={setDetailMovie}\r\n              />\r\n            )\r\n          );\r\n        })}\r\n      </Carousel>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapToProps = ({ Movies }) => {\r\n  const { banner, movie_loaded } = Movies;\r\n  return { banner, movie_loaded };\r\n};\r\n\r\nexport default connect(mapToProps, { setDetailMovie })(CarouselComponent);\r\n","import React, { lazy } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { MovieLoadingThumbnail } from \"./movies-thumbnail\";\r\nimport { getGenreName } from \"../Genres/genres-helper\";\r\nimport \"./movies-thumbnail.scss\";\r\n\r\nconst MovieComponent = lazy(() => import(\"./movies-component\"));\r\n\r\n// Produce Movie Suggestion Integrated with\r\n// reducers state Movies and Genres\r\n// genre_ids on movie object will render based\r\n// click event ThumbnailMovie Component\r\nfunction ConnectedMovieSuggestion({ movie_loaded, suggestion, genreMovie }) {\r\n  if (!movie_loaded) {\r\n    return <MovieLoadingThumbnail />;\r\n  }\r\n  return suggestion.map((item, index) => {\r\n    const genre = getGenreName(genreMovie, item.genre_ids);\r\n    item.genre_movie = genre;\r\n    return (\r\n      index < 10 &&\r\n      item.backdrop_path && <MovieComponent {...item} key={index.toString()} />\r\n    );\r\n  });\r\n}\r\n\r\nConnectedMovieSuggestion.propTypes = {\r\n  movie_loaded: PropTypes.bool.isRequired,\r\n  suggestion: PropTypes.array.isRequired,\r\n  genreMovie: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapToProp = ({ Movies, Genres }) => {\r\n  const { suggestion, movie_loaded } = Movies;\r\n  const { movie } = Genres;\r\n  const genreMovie = movie;\r\n  return { suggestion, movie_loaded, genreMovie };\r\n};\r\n\r\nexport default connect(mapToProp)(ConnectedMovieSuggestion);\r\n","/**\r\n * Produce as an array related with\r\n * state movies from reducers Genres and\r\n * input from array genre_ids of movie objects\r\n * @param {Array} genres\r\n * @param {Array} input\r\n */\r\nexport const getGenreName = (genres, input) => {\r\n  const result = [];\r\n\r\n  if (input.length === 0) return false;\r\n  if (input.length === 1) return genres.filter(genre => genre.id === input[0]);\r\n  for (let i = 0; i < input.length; i++) {\r\n    genres.map(item => {\r\n      if (item.id === input[i]) {\r\n        result.push(item);\r\n      }\r\n    });\r\n  }\r\n  return result;\r\n};\r\n","import React, { lazy } from \"react\";\r\nimport \"../Component/container.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { setMovieSuggestionGenre } from \"./movies-action\";\r\nimport \"./movies-section.scss\";\r\nconst PanelSection = lazy(() => import(\"../Component/panel-section\"));\r\n\r\n/**\r\n * Produce element child component with title\r\n * and panel menu based on genre movies\r\n * @param {String} title\r\n * @param {Node} children\r\n */\r\nfunction Section(props) {\r\n  const { title, menu, children, setMovieSuggestionGenre } = props;\r\n  const ChildSectionMovie = React.Children.map(children, child => {\r\n    return <div className=\"section-movie\">{child}</div>;\r\n  });\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <PanelSection\r\n        title={title}\r\n        menu={menu}\r\n        onClick={data => setMovieSuggestionGenre(data)}\r\n      />\r\n      {ChildSectionMovie}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapToProps = ({}) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapToProps, { setMovieSuggestionGenre })(Section);\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { movieLoaded } from \"../Movies/movies-action\";\r\nimport CarouselComponent from \"./home-carousel\";\r\nimport MovieSuggestion from \"../Movies/movies-suggestion\";\r\nimport MovieSection from \"../Movies/movies-section\";\r\nimport \"../../CoreScss/global.scss\";\r\n\r\n// Load movie to banner, suggestion, latest\r\n// with condition if loaded false\r\nfunction Home({ genre, movieLoaded }) {\r\n  useEffect(() => {\r\n    movieLoaded();\r\n  });\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <CarouselComponent />\r\n      <MovieSection title={\"Suggestion Movie\"} menu={genre}>\r\n        <MovieSuggestion />\r\n      </MovieSection>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ({ Genres, Movies }) => {\r\n  const { movie } = Genres;\r\n  return { genre: movie };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  movieLoaded\r\n})(Home);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./movies-thumbnail.scss\";\r\n\r\n// Check props use to memo\r\nconst propsMovieThumbnail = (prevProps, nextProps) => {\r\n  return prevProps.title === nextProps.title;\r\n};\r\n\r\n// Render the movie thumbnails component\r\n// Avoid to render bigger images, we use w500 as image size\r\n// thumbnail movies backdrop\r\nexport function MovieThumbnail({ onClick, vote, title, backdrop }) {\r\n  return (\r\n    <div className=\"movie-thumbnail\" onClick={onClick}>\r\n      <span className=\"movie-thumbnail-vote\">{vote}</span>\r\n      <div className=\"shadow\">\r\n        <span className=\"movie-thumbnail-title\">{title}</span>\r\n      </div>\r\n      <img\r\n        className=\"movie-thumnail-backdrop\"\r\n        src={`https://image.tmdb.org/t/p/w500/${backdrop}`}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// Component Loading Movie Thumbnail\r\nexport const MovieLoadingThumbnail = () => {\r\n  const node = [];\r\n  for (let i = 0; i < 10; i++) {\r\n    node.push(\r\n      <div className=\"movie-thumbnail-loading\" key={i.toString()}></div>\r\n    );\r\n  }\r\n  return node;\r\n};\r\n\r\nMovieThumbnail.propTypes = {\r\n  onClick: PropTypes.func,\r\n  vote: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  backdrop: PropTypes.string\r\n};\r\n\r\nexport default React.memo(MovieThumbnail, propsMovieThumbnail);\r\n"],"sourceRoot":""}