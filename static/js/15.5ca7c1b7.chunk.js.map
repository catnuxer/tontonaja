{"version":3,"sources":["Modules/Movies/movies-api.js","Modules/Movies/movies-component.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","Modules/Component/link-menu.js"],"names":["fetchDetailMovie","movieId","a","uri","httpGet","response","status","json","loaded","MovieThumbnail","lazy","MovieThumbnailPopup","MovieComponent","props","history","useHistory","ref","createRef","useState","isOpen","setIsOpen","movieInfo","setMovieInfo","handleClick","useCallback","handleWatchMovie","id","resp","setDetailMovie","push","pathname","location","search","state","useOnClickOutside","fallback","className","movieData","bottomPosition","window","pageYOffset","onClick","title","backdrop","backdrop_path","vote","vote_average","connect","getDetailMovie","_objectDestructuringEmpty","obj","TypeError","LinkWithPopUp","label","LinkWithoutPopUp","activeClassName","to","link","LinkComponent","useRef","showPopup","handler","useEffect","listener","event","current","contains","target","document","addEventListener","removeEventListener"],"mappings":"qLAIO,SAAeA,EAAtB,kC,4CAAO,WAAgCC,GAAhC,mBAAAC,EAAA,6DACCC,EADD,mBACmBF,EADnB,0DAEkBG,YAAQD,GAF1B,UAGmB,OADlBE,EAFD,QAGQC,OAHR,iCAIgBD,EAASE,OAJzB,cAIGA,EAJH,QAKEC,QAAS,EALX,kBAMID,GANJ,kCAQE,GARF,6C,8UCOME,EAAiBC,gBAAK,kBAAM,2CAC5BC,EAAsBD,gBAAK,kBACtC,kCAMK,SAASE,EAAeC,GAC7B,IAAIC,EAAUC,cACRC,EAAMC,sBAFwB,EAGRC,oBAAS,GAHD,mBAG7BC,EAH6B,KAGrBC,EAHqB,OAIFF,mBAAS,IAJP,mBAI7BG,EAJ6B,KAIlBC,EAJkB,KAK9BC,EAAcC,uBAAY,WAC9BJ,GAAU,GACVE,EAAaT,MAETY,EAAmBD,sBAAW,sBAAC,4BAAAtB,EAAA,sEAChBF,YAAiBa,EAAMa,IADP,QAEtB,KADPC,EAD6B,UAGjCd,EAAMe,eAAeD,GACrBb,EAAQe,KAAK,CACXC,SAAS,GAAD,OAAKC,IAAL,iBACRC,OAAO,OAAD,OAASnB,EAAMa,IACrBO,MAAO,CAAEhC,QAASY,EAAMa,OAPO,4CAerC,OAFAQ,4BAAkBlB,GAAK,kBAAMI,GAAU,MAGrC,kBAAC,WAAD,CAAUe,SAAU,kBAAC,wBAAD,OAClB,yBAAKC,UAAU,6BACZjB,GACC,kBAACR,EAAD,CACEK,IAAKA,EACLqB,UAAWhB,EACXiB,eAAgBC,OAAOC,YACvBC,QAAShB,IAGb,kBAAChB,EAAD,CACEiC,MAAO7B,EAAM6B,MACbD,QAAS,kBAAMlB,KACfoB,SAAU9B,EAAM+B,cAChBC,KAAMhC,EAAMiC,iBASPC,uBAHH,SAAC,GACX,OADmB,eACZ,KAEmB,CAAEnB,mBAAgBoB,oBAA/BD,CAAiDnC,I,gCCnEjD,SAASqC,EAA0BC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCADvC,mC,oQCGO,SAASC,EAAcvC,GAC5B,OAAO,0BAAMuB,UAAWvB,EAAMuB,WAAYvB,EAAMwC,OAG3C,SAASC,EAAiBzC,GAC/B,OACE,kBAAC,IAAD,CACEuB,UAAWvB,EAAMuB,UACjBmB,gBAAiB1C,EAAM0C,gBACvBC,GAAI3C,EAAM4C,MAET5C,EAAMwC,OAOE,SAASK,EAAc7C,GACpC,IAAMG,EAAM2C,mBAD+B,EAEfzC,oBAAS,GAFM,mBAEpCC,EAFoC,KAE5BC,EAF4B,KAK3C,OADAc,EAAkBlB,GAAK,kBAAMI,GAAU,MAErC,0BAAMgB,UAAU,iBAAiBK,QAAS,kBAAMrB,GAAU,KACvDP,EAAM+C,UACL,kBAACR,EAAkBvC,GAEnB,kBAACyC,EAAqBzC,GAEvBM,EACC,yBACEH,IAAKA,EACLoB,UAAWjB,EAAS,+BAAiC,cAEpDN,EAAM+C,WAEP,MAMH,SAAS1B,EAAkBlB,EAAK6C,GACrCC,qBACE,WACE,IAAMC,EAAW,SAAAC,GAEVhD,EAAIiD,UAAWjD,EAAIiD,QAAQC,SAASF,EAAMG,SAI/CN,EAAQG,IAMV,OAHAI,SAASC,iBAAiB,YAAaN,GACvCK,SAASC,iBAAiB,aAAcN,GAEjC,WACLK,SAASE,oBAAoB,YAAaP,GAC1CK,SAASE,oBAAoB,aAAcP,MAS/C,CAAC/C,EAAK6C","file":"static/js/15.5ca7c1b7.chunk.js","sourcesContent":["import { httpGet } from \"../../Helper/HttpFetch\";\r\n\r\n// Try to fetching detail movie before\r\n// push to route movie\r\nexport async function fetchDetailMovie(movieId) {\r\n  const uri = `/3/movie/${movieId}?append_to_response=video,images,credits,jobs`;\r\n  const response = await httpGet(uri);\r\n  if (response.status === 200) {\r\n    const json = await response.json();\r\n    json.loaded = true;\r\n    return json;\r\n  }\r\n  return false;\r\n}\r\n","import React, { useCallback, lazy, Suspense, useState, createRef } from \"react\";\r\nimport { MovieLoadingThumbnail } from \"./movies-thumbnail\";\r\nimport { useOnClickOutside } from \"../Component/link-menu\";\r\nimport \"./movies-thumbnail.scss\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { location } from \"../../Env\";\r\nimport { setDetailMovie, getDetailMovie } from \"./movies-action\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchDetailMovie } from \"./movies-api\";\r\n\r\n// Lazy imported component\r\nexport const MovieThumbnail = lazy(() => import(\"./movies-thumbnail\"));\r\nexport const MovieThumbnailPopup = lazy(() =>\r\n  import(\"./movies-thumbnail-popup\")\r\n);\r\n\r\n// Render child component thumbnail movie\r\n// including popup movie\r\n// handleWatchMovie related to fetching data\r\nexport function MovieComponent(props) {\r\n  let history = useHistory();\r\n  const ref = createRef();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [movieInfo, setMovieInfo] = useState({});\r\n  const handleClick = useCallback(() => {\r\n    setIsOpen(true);\r\n    setMovieInfo(props);\r\n  });\r\n  const handleWatchMovie = useCallback(async () => {\r\n    const resp = await fetchDetailMovie(props.id);\r\n    if (resp !== false) {\r\n      props.setDetailMovie(resp);\r\n      history.push({\r\n        pathname: `${location}/movie/detail`,\r\n        search: `?id=${props.id}`,\r\n        state: { movieId: props.id }\r\n      });\r\n    }\r\n  });\r\n\r\n  // Call hook passing in the ref and a function to call on outside click\r\n  useOnClickOutside(ref, () => setIsOpen(false));\r\n\r\n  return (\r\n    <Suspense fallback={<MovieLoadingThumbnail />}>\r\n      <div className=\"movie-thumbnail-container\">\r\n        {isOpen && (\r\n          <MovieThumbnailPopup\r\n            ref={ref}\r\n            movieData={movieInfo}\r\n            bottomPosition={window.pageYOffset}\r\n            onClick={handleWatchMovie}\r\n          />\r\n        )}\r\n        <MovieThumbnail\r\n          title={props.title}\r\n          onClick={() => handleClick()}\r\n          backdrop={props.backdrop_path}\r\n          vote={props.vote_average}\r\n        />\r\n      </div>\r\n    </Suspense>\r\n  );\r\n}\r\nconst mtp = ({}) => {\r\n  return {};\r\n};\r\nexport default connect(mtp, { setDetailMovie, getDetailMovie })(MovieComponent);\r\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport function LinkWithPopUp(props) {\r\n  return <span className={props.className}>{props.label}</span>;\r\n}\r\n\r\nexport function LinkWithoutPopUp(props) {\r\n  return (\r\n    <NavLink\r\n      className={props.className}\r\n      activeClassName={props.activeClassName}\r\n      to={props.link}\r\n    >\r\n      {props.label}\r\n    </NavLink>\r\n  );\r\n}\r\n\r\n// Module LinkComponent will render children props\r\n// when it set to use popup menu\r\nexport default function LinkComponent(props) {\r\n  const ref = useRef();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  // Call hook passing in the ref and a function to call on outside click\r\n  useOnClickOutside(ref, () => setIsOpen(false));\r\n  return (\r\n    <span className=\"link-container\" onClick={() => setIsOpen(true)}>\r\n      {props.showPopup ? (\r\n        <LinkWithPopUp {...props} />\r\n      ) : (\r\n        <LinkWithoutPopUp {...props} />\r\n      )}\r\n      {isOpen ? (\r\n        <div\r\n          ref={ref}\r\n          className={isOpen ? \"popup-area popup-area-active\" : \"popup-area\"}\r\n        >\r\n          {props.showPopup}\r\n        </div>\r\n      ) : null}\r\n    </span>\r\n  );\r\n}\r\n\r\n// Click outside area handling\r\nexport function useOnClickOutside(ref, handler) {\r\n  useEffect(\r\n    () => {\r\n      const listener = event => {\r\n        // Do nothing if clicking ref's element or descendent elements\r\n        if (!ref.current || ref.current.contains(event.target)) {\r\n          return;\r\n        }\r\n\r\n        handler(event);\r\n      };\r\n\r\n      document.addEventListener(\"mousedown\", listener);\r\n      document.addEventListener(\"touchstart\", listener);\r\n\r\n      return () => {\r\n        document.removeEventListener(\"mousedown\", listener);\r\n        document.removeEventListener(\"touchstart\", listener);\r\n      };\r\n    },\r\n    // Add ref and handler to effect dependencies\r\n    // It's worth noting that because passed in handler is a new ...\r\n    // ... function on every render that will cause this effect ...\r\n    // ... callback/cleanup to run every render. It's not a big deal ...\r\n    // ... but to optimize you can wrap handler in useCallback before ...\r\n    // ... passing it into this hook.\r\n    [ref, handler]\r\n  );\r\n}\r\n"],"sourceRoot":""}