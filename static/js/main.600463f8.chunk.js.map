{"version":3,"sources":["Env.js","Modules/Movies/movies-action.js","Modules/Genres/genres-action.js","Modules/Countries/countries-action.js","Modules/Countries/countries-reducer.js","Modules/Genres/genres-reducers.js","Modules/Movies/movies-reducer.js","Helper/HttpFetch.js","Modules/Countries/countries-saga.js","Modules/Genres/genres-saga.js","Modules/Movies/movies-saga.js","RootSagas/index.js","Store/index.js","App.js","RootReducers/index.js","serviceWorker.js","index.js"],"names":["apiDomain","apiKey","location","process","MOVIE_LOADED","SET_BANNER_MOVIE","SET_SUGGESTION_MOVIE","SET_LATEST_MOVE","SET_DETAIL_MOVIE","movieLoaded","type","setBannerMovie","response","setSuggestionMovie","setLatestMovie","SET_GENRE_MOVIE","SET_GENRE_TV","GENRE_LOADED","genreLoaded","setGenreMovie","setGenreTv","COUNTRY_LOADED","SET_COUNTRY","countryLoaded","setCountry","country","initState","menuHeader","state","action","countryCode","code","selectedCountry","map","item","temp","cc","find","ct","iso_3166_1","countryName","english_name","push","name","movie","tv","banner","suggestion","latest","detail","httpGet","uri","a","header","fetch","method","headers","Authorization","resp","__getCountries","getCountries","rootSaga","call","status","json","put","takeEvery","fork","__getGenre","getGenre","all","respMovie","respTv","genres","__getMovie","getMovie","uriGetBanner","uriGetSuggestion","uriGetLatest","respBanner","respSuggestion","respLatest","console","log","arr","i","results","SagaCounties","SagaGenres","SagaMovies","history","createBrowserHistory","composeEnhancers","compose","sagaMiddleware","createSagaMiddleware","routeMiddleware","routerMiddleware","middlewares","HeaderComponent","lazy","ConnectedHome","ConnectedGenres","ConnectedCountries","ConnectedMovies","ConnectedTvSeries","ConnectedSearch","store","createStore","combineReducers","router","connectRouter","Countries","Genres","Movies","applyMiddleware","run","configureStore","routeMap","id","path","component","parent","MainApp","context","fallback","RouteComponent","key","exact","render","to","staticContext","props","App","ReactReduxContext","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.600463f8.chunk.js","sourcesContent":["// I think about this environment\r\n// Its better save the domain api key to node environment\r\nconst apiDomain =\r\n  process.env.NODE_ENV === \"development\"\r\n    ? \"https://api.themoviedb.org\"\r\n    : \"https://api.themoviedb.org\";\r\nconst apiKey =\r\n  process.env.NODE_ENV === \"development\"\r\n    ? \"eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwYWEyMDk4YjUwMjdjY2UzNmRlMTg5OTA2MGUwODllZiIsInN1YiI6IjVlN2JkMWIwYWIxYmM3NTg3NGMxMmUwMSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.3XSdx8E5BgQmF2sHpB_q4LVW7fibcjdPFyN6KOGByws\"\r\n    : \"eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwYWEyMDk4YjUwMjdjY2UzNmRlMTg5OTA2MGUwODllZiIsInN1YiI6IjVlN2JkMWIwYWIxYmM3NTg3NGMxMmUwMSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.3XSdx8E5BgQmF2sHpB_q4LVW7fibcjdPFyN6KOGByws\";\r\n\r\nconst location = `${process.env.PUBLIC_URL}`;\r\nexport { apiDomain, apiKey, location };\r\n","export const MOVIE_LOADED = \"Movies/movie_loaded\";\r\nexport const SET_BANNER_MOVIE = \"Movies/set_banner_movie\";\r\nexport const SET_SUGGESTION_MOVIE = \"Movies/set_suggestion_movie\";\r\nexport const SET_LATEST_MOVE = \"Movies/set_latest_movie\";\r\nexport const SET_DETAIL_MOVIE = \"Movies/set_detail_movie\";\r\n\r\n// Saga task runner loaded movie\r\nexport const movieLoaded = () => ({\r\n  type: MOVIE_LOADED\r\n});\r\n\r\n// Dispatching banner movie response\r\nexport const setBannerMovie = response => ({\r\n  type: SET_BANNER_MOVIE,\r\n  response\r\n});\r\n\r\n// Dispatching suggestion movie\r\nexport const setSuggestionMovie = response => ({\r\n  type: SET_SUGGESTION_MOVIE,\r\n  response\r\n});\r\n\r\n// Dispatching latest movie\r\nexport const setLatestMovie = response => ({\r\n  type: SET_LATEST_MOVE,\r\n  response\r\n});\r\n\r\n// Dispatching detail movie\r\nexport const setDetailMovie = movie => ({\r\n  type: SET_DETAIL_MOVIE,\r\n  movie\r\n});\r\n","export const SET_GENRE_MOVIE = \"Genres/set_movies\";\r\nexport const SET_GENRE_TV = \"Genres/set_tv\";\r\nexport const GENRE_LOADED = \"Genres/genre_loaded\";\r\n\r\n// Task saga runner\r\nexport const genreLoaded = () => ({\r\n  type: GENRE_LOADED\r\n});\r\n/**\r\n * Set reducers Genre state movie from api response\r\n * @param {Array} response\r\n */\r\nexport const setGenreMovie = response => ({\r\n  type: SET_GENRE_MOVIE,\r\n  response\r\n});\r\n\r\n/**\r\n * Set reducers Genre state tv from api response\r\n * @param {Array} response\r\n */\r\nexport const setGenreTv = response => ({\r\n  type: SET_GENRE_TV,\r\n  response\r\n});\r\n","export const COUNTRY_LOADED = \"Countries/country_loaded\";\r\nexport const SET_COUNTRY = \"Countries/set_country\";\r\n\r\n// Saga task runner\r\nexport const countryLoaded = () => ({\r\n  type: COUNTRY_LOADED\r\n});\r\n\r\n// Dispatching country response\r\nexport const setCountry = country => ({\r\n  type: SET_COUNTRY,\r\n  response: country\r\n});\r\n","import { SET_COUNTRY } from \"./countries-action\";\r\n\r\nconst initState = {\r\n  country: [],\r\n  menuHeader: []\r\n};\r\n\r\n// Reducers Countries\r\n// use to render menu and some component when\r\n// need to render country information\r\nexport default (state = initState, action) => {\r\n  switch (action.type) {\r\n    case SET_COUNTRY:\r\n      const countryCode = [\r\n        {\r\n          code: [\"US\", \"DE\", \"IE\", \"DK\", \"ZA\", \"AT\", \"AR\", \"IL\", \"TW\"]\r\n        },\r\n        {\r\n          code: [\"GB\", \"JP\", \"ES\", \"FI\", \"KR\", \"SE\", \"NO\", \"HU\", \"RO\"]\r\n        },\r\n        {\r\n          code: [\"CA\", \"AU\", \"HK\", \"IN\", \"NZ\", \"MX\", \"ID\", \"BR\", \"PL\"]\r\n        },\r\n        {\r\n          code: [\"FR\", \"IT\", \"CN\", \"BE\", \"NL\", \"RU\", \"CH\", \"FI\", \"TH\"]\r\n        }\r\n      ];\r\n\r\n      const selectedCountry = [];\r\n      countryCode.map(item => {\r\n        const temp = [];\r\n        item.code.map(cc => {\r\n          const country = action.response.find(ct => ct.iso_3166_1 === cc);\r\n          const countryName =\r\n            country.english_name === \"United States of America\"\r\n              ? \"United State\"\r\n              : country.english_name;\r\n          temp.push({\r\n            code: country.iso_3166_1,\r\n            name: countryName\r\n          });\r\n        });\r\n        selectedCountry.push(temp);\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        country: action.response,\r\n        menuHeader: selectedCountry\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { SET_GENRE_MOVIE, SET_GENRE_TV } from \"./genres-action\";\r\n\r\nconst initState = {\r\n  movie: [],\r\n  tv: []\r\n};\r\nexport default (state = initState, action) => {\r\n  switch (action.type) {\r\n    case SET_GENRE_MOVIE:\r\n      return {\r\n        ...state,\r\n        movie: action.response\r\n      };\r\n\r\n    case SET_GENRE_TV:\r\n      return {\r\n        ...state,\r\n        tv: action.response\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  SET_BANNER_MOVIE,\r\n  SET_SUGGESTION_MOVIE,\r\n  SET_LATEST_MOVE,\r\n  SET_DETAIL_MOVIE\r\n} from \"./movies-action\";\r\n\r\nconst initState = {\r\n  banner: [],\r\n  suggestion: [],\r\n  latest: [],\r\n  detail: {}\r\n};\r\n\r\nexport default (state = initState, action) => {\r\n  switch (action.type) {\r\n    case SET_BANNER_MOVIE:\r\n      return {\r\n        ...state,\r\n        banner: action.response\r\n      };\r\n\r\n    case SET_SUGGESTION_MOVIE:\r\n      return {\r\n        ...state,\r\n        suggestion: action.response\r\n      };\r\n\r\n    case SET_LATEST_MOVE:\r\n      return {\r\n        ...state,\r\n        latest: action.response\r\n      };\r\n\r\n    case SET_DETAIL_MOVIE:\r\n      return {\r\n        ...state,\r\n        detail: {\r\n          ...action.movie\r\n        }\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { apiDomain, apiKey } from \"../Env\";\r\n/**\r\n * Http Fetch Request POST Method\r\n * @param {String} uri\r\n * @param {Object} payload\r\n * @param {Object} header\r\n */\r\nconst httpPost = async (uri, payload, header = {}) => {\r\n  let resp = await fetch(`${apiDomain}${uri}`, {\r\n    body: JSON.stringify(payload),\r\n    method: \"POST\",\r\n    headers: {\r\n      ...header,\r\n      Authorization: `Bearer ${apiKey}`,\r\n      \"content-type\": \"application/json\"\r\n    }\r\n  });\r\n  return resp;\r\n};\r\n\r\n/**\r\n * Http Fetch Request GET Method\r\n * @param {String} uri\r\n * @param {Object} header\r\n */\r\nconst httpGet = async (uri, header = {}) => {\r\n  let resp = await fetch(`${apiDomain}${uri}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      ...header,\r\n      Authorization: `Bearer ${apiKey}`,\r\n      \"content-type\": \"application/json\"\r\n    }\r\n  });\r\n  return resp;\r\n};\r\n\r\nexport { httpGet, httpPost };\r\n","import { fork, takeEvery, put, call } from \"redux-saga/effects\";\r\nimport { httpGet } from \"../../Helper/HttpFetch\";\r\nimport { COUNTRY_LOADED, setCountry } from \"./countries-action\";\r\nfunction* __getCountries() {\r\n  try {\r\n    const uri = \"/3/configuration/countries\";\r\n    const response = yield call(httpGet, uri);\r\n    if (response.status == 200) {\r\n      const json = yield call([response, response.json]);\r\n      yield put(setCountry(json));\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport function* getCountries() {\r\n  yield takeEvery(COUNTRY_LOADED, __getCountries);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield fork(getCountries);\r\n}\r\n","import { all, fork, takeEvery, put, call } from \"redux-saga/effects\";\r\nimport { httpGet } from \"../../Helper/HttpFetch\";\r\nimport { GENRE_LOADED, setGenreMovie, setGenreTv } from \"./genres-action\";\r\n\r\nfunction* __getGenre() {\r\n  try {\r\n    const uriMovie = \"/3/genre/movie/list\";\r\n    const uriTv = \"/3/genre/tv/list\";\r\n    const [respMovie, respTv] = yield all([\r\n      call(httpGet, uriMovie),\r\n      call(httpGet, uriTv)\r\n    ]);\r\n\r\n    //Check if promise all each receive 200 status\r\n    if (respMovie.status === 200) {\r\n      const response = yield call([respMovie, respMovie.json]);\r\n      yield put(setGenreMovie(response.genres));\r\n    }\r\n\r\n    if (respTv.status === 200) {\r\n      const response = yield call([respTv, respTv.json]);\r\n      yield put(setGenreTv(response.genres));\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport function* getGenre() {\r\n  yield takeEvery(GENRE_LOADED, __getGenre);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield fork(getGenre);\r\n}\r\n","import { all, fork, takeEvery, put, call } from \"redux-saga/effects\";\r\nimport {\r\n  MOVIE_LOADED,\r\n  setBannerMovie,\r\n  setSuggestionMovie,\r\n  setLatestMovie\r\n} from \"./movies-action\";\r\nimport { httpGet } from \"../../Helper/HttpFetch\";\r\n\r\nfunction* __getMovie() {\r\n  try {\r\n    const uriDiscover = \"/3/discover/movie?\";\r\n    const uriGetBanner = `${uriDiscover}page=1&sort_by=popularity.desc&release_date.gte=2020-03-26&year=2020`;\r\n    const uriGetSuggestion = `${uriDiscover}page=1&sort_by=vote_average.desc&release_date.gte=2020-03-26&year=2020`;\r\n    const uriGetLatest = `${uriDiscover}page=1&sort_by=vote_average.desc&release_date.gte=2020-03-26&year=2020`;\r\n\r\n    const [respBanner, respSuggestion, respLatest] = yield all([\r\n      call(httpGet, uriGetBanner),\r\n      call(httpGet, uriGetSuggestion),\r\n      call(httpGet, uriGetLatest)\r\n    ]);\r\n\r\n    // Set to state only if receive status 200\r\n    if (respBanner.status === 200) {\r\n      const response = yield call([respBanner, respBanner.json]);\r\n      console.log(\"response movie saga\", response);\r\n      //Set only max 6 movie\r\n      const max = 6;\r\n      const arr = [];\r\n      for (let i = 0; i < max; i++) {\r\n        arr.push(response.results[i]);\r\n      }\r\n      yield put(setBannerMovie(arr));\r\n    }\r\n\r\n    // Set all suggestion\r\n    if (respSuggestion.status === 200) {\r\n      const response = yield call([respSuggestion, respSuggestion.json]);\r\n      yield put(setSuggestionMovie(response.results));\r\n    }\r\n\r\n    // Set latest movie\r\n    if (respLatest.status === 200) {\r\n      const response = yield call([respLatest, respLatest.json]);\r\n      yield put(setLatestMovie(response.results));\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport function* getMovie() {\r\n  yield takeEvery(MOVIE_LOADED, __getMovie);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield fork(getMovie);\r\n}\r\n","import { all, fork } from \"redux-saga/effects\";\r\nimport SagaCounties from \"../Modules/Countries/countries-saga\";\r\nimport SagaGenres from \"../Modules/Genres/genres-saga\";\r\nimport SagaMovies from \"../Modules/Movies/movies-saga\";\r\nexport default function*() {\r\n  yield all([fork(SagaCounties), fork(SagaGenres), fork(SagaMovies)]);\r\n}\r\n","import { createBrowserHistory } from \"history\";\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport { routerMiddleware } from \"connected-react-router\";\r\nimport reducer from \"../RootReducers\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"../RootSagas\";\r\nexport const history = createBrowserHistory();\r\n\r\nconst composeEnhancers = compose;\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst routeMiddleware = routerMiddleware(history);\r\nconst middlewares = [sagaMiddleware];\r\nif (process.env.NODE_ENV === `development`) {\r\n  const { logger } = require(`redux-logger`);\r\n\r\n  middlewares.push(logger);\r\n}\r\n\r\nexport default function configureStore(initState) {\r\n  const store = createStore(\r\n    reducer(history),\r\n    initState,\r\n    composeEnhancers(\r\n      applyMiddleware(...middlewares),\r\n      applyMiddleware(routeMiddleware)\r\n    )\r\n  );\r\n  sagaMiddleware.run(rootSaga);\r\n  if (module.hot) {\r\n    module.hot.accept(\"../RootReducers/index\", () => {\r\n      const nextReducer = require(\"../RootReducers/index\");\r\n      store.replaceReducer(nextReducer);\r\n    });\r\n  }\r\n  return store;\r\n}\r\n","import React, { Suspense, lazy } from \"react\";\r\nimport { Provider, ReactReduxContext } from \"react-redux\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport { ConnectedRouter } from \"connected-react-router\";\r\nimport configureStore, { history } from \"./Store\";\r\nimport { location } from \"./Env\";\r\nimport \"./CoreScss/global.scss\";\r\n/**\r\n * Do to test unit need to exports of Component\r\n */\r\nexport const HeaderComponent = lazy(() => import(\"./Header/header-component\"));\r\nexport const ConnectedHome = lazy(() => import(\"./Modules/Home\"));\r\nexport const ConnectedGenres = lazy(() => import(\"./Modules/Genres\"));\r\nexport const ConnectedCountries = lazy(() => import(\"./Modules/Countries\"));\r\nexport const ConnectedMovies = lazy(() => import(\"./Modules/Movies\"));\r\nexport const ConnectedTvSeries = lazy(() => import(\"./Modules/TvSeries\"));\r\nexport const ConnectedSearch = lazy(() => import(\"./Modules/Search\"));\r\n\r\nconst store = configureStore();\r\n\r\nconst routeMap = [\r\n  {\r\n    id: \"root\",\r\n    path: `${location}/`,\r\n    component: null,\r\n    parent: true\r\n  },\r\n  {\r\n    id: \"home\",\r\n    path: `${location}/home`,\r\n    component: ConnectedHome,\r\n    parent: false\r\n  },\r\n  {\r\n    id: \"genre\",\r\n    path: `${location}/genre`,\r\n    component: ConnectedGenres,\r\n    parent: false\r\n  },\r\n  {\r\n    id: \"country\",\r\n    path: `${location}/country`,\r\n    component: ConnectedCountries,\r\n    parent: false\r\n  },\r\n  {\r\n    id: \"movie\",\r\n    path: `${location}/movie`,\r\n    component: ConnectedMovies,\r\n    parent: false\r\n  },\r\n  {\r\n    id: \"tvserie\",\r\n    path: `${location}/tvserie`,\r\n    component: ConnectedTvSeries,\r\n    parent: false\r\n  },\r\n  {\r\n    id: \"search\",\r\n    path: `${location}/search`,\r\n    component: ConnectedSearch,\r\n    parent: false\r\n  }\r\n];\r\n\r\nfunction MainApp({ history, context }) {\r\n  return (\r\n    <ConnectedRouter history={history} context={context}>\r\n      <Suspense fallback={<div>Loading App...</div>}>\r\n        <HeaderComponent />\r\n        <Switch>\r\n          {routeMap.map(item => {\r\n            const RouteComponent = item.component;\r\n            if (item.parent) {\r\n              return (\r\n                <Route\r\n                  key={item.id}\r\n                  exact\r\n                  path={item.path}\r\n                  render={() => <Redirect to={`${location}/home`} />}\r\n                />\r\n              );\r\n            } else {\r\n              return (\r\n                <Route\r\n                  key={item.id}\r\n                  path={item.path}\r\n                  render={({ staticContext, ...props }) => (\r\n                    <RouteComponent {...props} />\r\n                  )}\r\n                />\r\n              );\r\n            }\r\n          })}\r\n        </Switch>\r\n      </Suspense>\r\n    </ConnectedRouter>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store} context={ReactReduxContext}>\r\n      <MainApp history={history} context={ReactReduxContext} />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport { connectRouter } from \"connected-react-router\";\r\nimport Countries from \"../Modules/Countries/countries-reducer\";\r\nimport Genres from \"../Modules/Genres/genres-reducers\";\r\nimport Movies from \"../Modules/Movies/movies-reducer\";\r\n\r\nexport default history =>\r\n  combineReducers({\r\n    router: connectRouter(history),\r\n    Countries,\r\n    Genres,\r\n    Movies\r\n  });\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}