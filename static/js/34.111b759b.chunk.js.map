{"version":3,"sources":["Modules/Component/link-menu.js"],"names":["LinkWithPopUp","props","className","label","LinkWithoutPopUp","activeClassName","to","link","LinkComponent","ref","useRef","useState","isOpen","setIsOpen","useOnClickOutside","onClick","showPopup","handler","useEffect","listener","event","current","contains","target","document","addEventListener","removeEventListener"],"mappings":"4UAGO,SAASA,EAAcC,GAC5B,OAAO,0BAAMC,UAAWD,EAAMC,WAAYD,EAAME,OAG3C,SAASC,EAAiBH,GAC/B,OACE,kBAAC,IAAD,CACEC,UAAWD,EAAMC,UACjBG,gBAAiBJ,EAAMI,gBACvBC,GAAIL,EAAMM,MAETN,EAAME,OAOE,SAASK,EAAcP,GACpC,IAAMQ,EAAMC,mBAD+B,EAEfC,oBAAS,GAFM,mBAEpCC,EAFoC,KAE5BC,EAF4B,KAK3C,OADAC,EAAkBL,GAAK,kBAAMI,GAAU,MAErC,0BAAMX,UAAU,iBAAiBa,QAAS,kBAAMF,GAAU,KACvDZ,EAAMe,UACL,kBAAChB,EAAkBC,GAEnB,kBAACG,EAAqBH,GAEvBW,EACC,yBACEH,IAAKA,EACLP,UAAWU,EAAS,+BAAiC,cAEpDX,EAAMe,WAEP,MAMH,SAASF,EAAkBL,EAAKQ,GACrCC,qBACE,WACE,IAAMC,EAAW,SAAAC,GAEVX,EAAIY,UAAWZ,EAAIY,QAAQC,SAASF,EAAMG,SAI/CN,EAAQG,IAMV,OAHAI,SAASC,iBAAiB,YAAaN,GACvCK,SAASC,iBAAiB,aAAcN,GAEjC,WACLK,SAASE,oBAAoB,YAAaP,GAC1CK,SAASE,oBAAoB,aAAcP,MAS/C,CAACV,EAAKQ","file":"static/js/34.111b759b.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport function LinkWithPopUp(props) {\r\n  return <span className={props.className}>{props.label}</span>;\r\n}\r\n\r\nexport function LinkWithoutPopUp(props) {\r\n  return (\r\n    <NavLink\r\n      className={props.className}\r\n      activeClassName={props.activeClassName}\r\n      to={props.link}\r\n    >\r\n      {props.label}\r\n    </NavLink>\r\n  );\r\n}\r\n\r\n// Module LinkComponent will render children props\r\n// when it set to use popup menu\r\nexport default function LinkComponent(props) {\r\n  const ref = useRef();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  // Call hook passing in the ref and a function to call on outside click\r\n  useOnClickOutside(ref, () => setIsOpen(false));\r\n  return (\r\n    <span className=\"link-container\" onClick={() => setIsOpen(true)}>\r\n      {props.showPopup ? (\r\n        <LinkWithPopUp {...props} />\r\n      ) : (\r\n        <LinkWithoutPopUp {...props} />\r\n      )}\r\n      {isOpen ? (\r\n        <div\r\n          ref={ref}\r\n          className={isOpen ? \"popup-area popup-area-active\" : \"popup-area\"}\r\n        >\r\n          {props.showPopup}\r\n        </div>\r\n      ) : null}\r\n    </span>\r\n  );\r\n}\r\n\r\n// Click outside area handling\r\nexport function useOnClickOutside(ref, handler) {\r\n  useEffect(\r\n    () => {\r\n      const listener = event => {\r\n        // Do nothing if clicking ref's element or descendent elements\r\n        if (!ref.current || ref.current.contains(event.target)) {\r\n          return;\r\n        }\r\n\r\n        handler(event);\r\n      };\r\n\r\n      document.addEventListener(\"mousedown\", listener);\r\n      document.addEventListener(\"touchstart\", listener);\r\n\r\n      return () => {\r\n        document.removeEventListener(\"mousedown\", listener);\r\n        document.removeEventListener(\"touchstart\", listener);\r\n      };\r\n    },\r\n    // Add ref and handler to effect dependencies\r\n    // It's worth noting that because passed in handler is a new ...\r\n    // ... function on every render that will cause this effect ...\r\n    // ... callback/cleanup to run every render. It's not a big deal ...\r\n    // ... but to optimize you can wrap handler in useCallback before ...\r\n    // ... passing it into this hook.\r\n    [ref, handler]\r\n  );\r\n}\r\n"],"sourceRoot":""}