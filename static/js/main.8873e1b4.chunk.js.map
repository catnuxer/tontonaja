{"version":3,"sources":["Modules/Movies/movies-action.js","Env.js","Modules/Genres/genres-action.js","Modules/Countries/countries-action.js","Modules/Countries/countries-reducer.js","Modules/Genres/genres-reducers.js","Modules/Movies/movies-reducer.js","Helper/HttpFetch.js","Modules/Countries/countries-saga.js","Modules/Genres/genres-saga.js","Modules/Movies/movies-saga.js","RootSagas/index.js","Store/index.js","App.js","RootReducers/index.js","serviceWorker.js","index.js"],"names":["MOVIE_LOADED","SET_LOADING_LOADED","SET_BANNER_MOVIE","SET_SUGGESTION_MOVIE","SET_LATEST_MOVE","SET_DETAIL_MOVIE","SET_MOVIE_SUGGESTION_GENRE","movieLoaded","type","setLoadingLoaded","loading","setBannerMovie","response","setSuggestionMovie","setLatestMovie","setMovieSuggestionGenre","genre","apiDomain","apiKey","location","process","SET_GENRE_MOVIE","SET_GENRE_TV","GENRE_LOADED","genreLoaded","setGenreMovie","setGenreTv","COUNTRY_LOADED","SET_COUNTRY","countryLoaded","setCountry","country","initState","menuHeader","state","action","countryCode","code","selectedCountry","map","item","temp","cc","find","ct","iso_3166_1","countryName","english_name","push","name","movie","tv","movie_loaded","banner","suggestion","latest","detail","data","i","length","current","check","genre_ids","id","splice","unshift","k","httpGet","uri","a","header","fetch","method","headers","Authorization","resp","__getCountries","getCountries","rootSaga","call","status","json","put","takeEvery","fork","__getGenre","getGenre","all","respMovie","respTv","genres","__getMovie","getMovie","page","date","moment","format","year","uriGetBanner","uriGetSuggestion","uriGetLatest","respBanner","respSuggestion","respLatest","max","arr","index","backdrop_path","results","SagaCounties","SagaGenres","SagaMovies","history","createBrowserHistory","composeEnhancers","compose","sagaMiddleware","createSagaMiddleware","routeMiddleware","routerMiddleware","middlewares","HeaderComponent","lazy","FooterComponent","ConnectedHome","ConnectedGenres","ConnectedCountries","ConnectedMovies","ConnectedTvSeries","ConnectedSearch","store","createStore","combineReducers","router","connectRouter","Countries","Genres","Movies","applyMiddleware","run","configureStore","routeMap","path","component","parent","MainApp","context","fallback","RouteComponent","key","exact","render","to","staticContext","props","App","ReactReduxContext","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8873e1b4.chunk.js","sourcesContent":["import { SET_GENRE_MOVIE } from \"../Genres/genres-action\";\r\n\r\nexport const MOVIE_LOADED = \"Movies/movie_loaded\";\r\nexport const SET_LOADING_LOADED = \"Movies/set_loading_loaded\";\r\nexport const SET_BANNER_MOVIE = \"Movies/set_banner_movie\";\r\nexport const SET_SUGGESTION_MOVIE = \"Movies/set_suggestion_movie\";\r\nexport const SET_LATEST_MOVE = \"Movies/set_latest_movie\";\r\nexport const SET_DETAIL_MOVIE = \"Movies/set_detail_movie\";\r\nexport const SET_MOVIE_SUGGESTION_GENRE = \"Movies/set_movie_suggestion_genre\";\r\n\r\n// Saga task runner loaded movie\r\nexport const movieLoaded = () => ({\r\n  type: MOVIE_LOADED\r\n});\r\n\r\n//Set Loading movies when loaded process\r\nexport const setLoadingLoaded = loading => ({\r\n  type: SET_LOADING_LOADED,\r\n  loading\r\n});\r\n\r\n// Dispatching banner movie response\r\nexport const setBannerMovie = response => ({\r\n  type: SET_BANNER_MOVIE,\r\n  response\r\n});\r\n\r\n// Dispatching suggestion movie\r\nexport const setSuggestionMovie = response => ({\r\n  type: SET_SUGGESTION_MOVIE,\r\n  response\r\n});\r\n\r\n// Dispatching latest movie\r\nexport const setLatestMovie = response => ({\r\n  type: SET_LATEST_MOVE,\r\n  response\r\n});\r\n\r\n// Dispatching detail movie\r\nexport const setDetailMovie = movie => ({\r\n  type: SET_DETAIL_MOVIE,\r\n  movie\r\n});\r\n\r\nexport const setMovieSuggestionGenre = genre => ({\r\n  type: SET_MOVIE_SUGGESTION_GENRE,\r\n  genre\r\n});\r\n","// I think about this environment\r\n// Its better save the domain api key to node environment\r\nconst apiDomain =\r\n  process.env.NODE_ENV === \"development\"\r\n    ? \"https://api.themoviedb.org\"\r\n    : \"https://api.themoviedb.org\";\r\nconst apiKey =\r\n  process.env.NODE_ENV === \"development\"\r\n    ? \"eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwYWEyMDk4YjUwMjdjY2UzNmRlMTg5OTA2MGUwODllZiIsInN1YiI6IjVlN2JkMWIwYWIxYmM3NTg3NGMxMmUwMSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.3XSdx8E5BgQmF2sHpB_q4LVW7fibcjdPFyN6KOGByws\"\r\n    : \"eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwYWEyMDk4YjUwMjdjY2UzNmRlMTg5OTA2MGUwODllZiIsInN1YiI6IjVlN2JkMWIwYWIxYmM3NTg3NGMxMmUwMSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.3XSdx8E5BgQmF2sHpB_q4LVW7fibcjdPFyN6KOGByws\";\r\n\r\nconst location = `${process.env.PUBLIC_URL}`;\r\nexport { apiDomain, apiKey, location };\r\n","export const SET_GENRE_MOVIE = \"Genres/set_movies\";\r\nexport const SET_GENRE_TV = \"Genres/set_tv\";\r\nexport const GENRE_LOADED = \"Genres/genre_loaded\";\r\n\r\n// Task saga runner\r\nexport const genreLoaded = () => ({\r\n  type: GENRE_LOADED\r\n});\r\n/**\r\n * Set reducers Genre state movie from api response\r\n * @param {Array} response\r\n */\r\nexport const setGenreMovie = response => ({\r\n  type: SET_GENRE_MOVIE,\r\n  response\r\n});\r\n\r\n/**\r\n * Set reducers Genre state tv from api response\r\n * @param {Array} response\r\n */\r\nexport const setGenreTv = response => ({\r\n  type: SET_GENRE_TV,\r\n  response\r\n});\r\n","export const COUNTRY_LOADED = \"Countries/country_loaded\";\r\nexport const SET_COUNTRY = \"Countries/set_country\";\r\n\r\n// Saga task runner\r\nexport const countryLoaded = () => ({\r\n  type: COUNTRY_LOADED\r\n});\r\n\r\n// Dispatching country response\r\nexport const setCountry = country => ({\r\n  type: SET_COUNTRY,\r\n  response: country\r\n});\r\n","import { SET_COUNTRY } from \"./countries-action\";\r\n\r\nconst initState = {\r\n  country: [],\r\n  menuHeader: []\r\n};\r\n\r\n// Reducers Countries\r\n// use to render menu and some component when\r\n// need to render country information\r\nexport default (state = initState, action) => {\r\n  switch (action.type) {\r\n    case SET_COUNTRY:\r\n      const countryCode = [\r\n        {\r\n          code: [\"US\", \"DE\", \"IE\", \"DK\", \"ZA\", \"AT\", \"AR\", \"IL\", \"TW\"]\r\n        },\r\n        {\r\n          code: [\"GB\", \"JP\", \"ES\", \"FI\", \"KR\", \"SE\", \"NO\", \"HU\", \"RO\"]\r\n        },\r\n        {\r\n          code: [\"CA\", \"AU\", \"HK\", \"IN\", \"NZ\", \"MX\", \"ID\", \"BR\", \"PL\"]\r\n        },\r\n        {\r\n          code: [\"FR\", \"IT\", \"CN\", \"BE\", \"NL\", \"RU\", \"CH\", \"FI\", \"TH\"]\r\n        }\r\n      ];\r\n\r\n      const selectedCountry = [];\r\n      countryCode.map(item => {\r\n        const temp = [];\r\n        item.code.map(cc => {\r\n          const country = action.response.find(ct => ct.iso_3166_1 === cc);\r\n          const countryName =\r\n            country.english_name === \"United States of America\"\r\n              ? \"United State\"\r\n              : country.english_name;\r\n          temp.push({\r\n            code: country.iso_3166_1,\r\n            name: countryName\r\n          });\r\n        });\r\n        selectedCountry.push(temp);\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        country: action.response,\r\n        menuHeader: selectedCountry\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { SET_GENRE_MOVIE, SET_GENRE_TV } from \"./genres-action\";\r\n\r\nconst initState = {\r\n  movie: [],\r\n  tv: []\r\n};\r\nexport default (state = initState, action) => {\r\n  switch (action.type) {\r\n    case SET_GENRE_MOVIE:\r\n      return {\r\n        ...state,\r\n        movie: action.response\r\n      };\r\n\r\n    case SET_GENRE_TV:\r\n      return {\r\n        ...state,\r\n        tv: action.response\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import update from \"react-addons-update\";\r\nimport {\r\n  SET_BANNER_MOVIE,\r\n  SET_SUGGESTION_MOVIE,\r\n  SET_LATEST_MOVE,\r\n  SET_DETAIL_MOVIE,\r\n  SET_MOVIE_SUGGESTION_GENRE,\r\n  SET_LOADING_LOADED\r\n} from \"./movies-action\";\r\n\r\nconst initState = {\r\n  movie_loaded: true,\r\n  banner: [],\r\n  suggestion: [],\r\n  latest: [],\r\n  detail: {}\r\n};\r\n\r\nexport default (state = initState, action) => {\r\n  switch (action.type) {\r\n    case SET_LOADING_LOADED:\r\n      return {\r\n        ...state,\r\n        movie_loaded: action.loading\r\n      };\r\n    case SET_BANNER_MOVIE:\r\n      return {\r\n        ...state,\r\n        banner: [...action.response, ...state.suggestion]\r\n      };\r\n\r\n    case SET_SUGGESTION_MOVIE:\r\n      return {\r\n        ...state,\r\n        suggestion: [...action.response, ...state.suggestion]\r\n      };\r\n\r\n    case SET_LATEST_MOVE:\r\n      return {\r\n        ...state,\r\n        latest: [...action.response, ...state.suggestion]\r\n      };\r\n\r\n    case SET_DETAIL_MOVIE:\r\n      return {\r\n        ...state,\r\n        detail: {\r\n          ...action.movie\r\n        }\r\n      };\r\n\r\n    // Produce set movie to top as array where equal with selection genre\r\n    case SET_MOVIE_SUGGESTION_GENRE:\r\n      const data = state.suggestion;\r\n      for (let i = 0; i < data.length; i++) {\r\n        const current = data[i];\r\n        const check =\r\n          data[i] && data[i].genre_ids && data[i].genre_ids.length > 0;\r\n        if (check) {\r\n          if (data[i].genre_ids.length == 1) {\r\n            if (data[i].genre_ids[0] === action.genre.id) {\r\n              data.splice(i, 1);\r\n              data.unshift(current);\r\n            }\r\n          } else if (data[i].genre_ids.length > 1) {\r\n            for (let k = 0; k < data[i].genre_ids.length; k++) {\r\n              if (data[i].genre_ids[k] === action.genre.id) {\r\n                data.splice(i, 1);\r\n                data.unshift(current);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        suggestion: [...data]\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { apiDomain, apiKey } from \"../Env\";\r\n/**\r\n * Http Fetch Request POST Method\r\n * @param {String} uri\r\n * @param {Object} payload\r\n * @param {Object} header\r\n */\r\nconst httpPost = async (uri, payload, header = {}) => {\r\n  let resp = await fetch(`${apiDomain}${uri}`, {\r\n    body: JSON.stringify(payload),\r\n    method: \"POST\",\r\n    headers: {\r\n      ...header,\r\n      Authorization: `Bearer ${apiKey}`,\r\n      \"content-type\": \"application/json\"\r\n    }\r\n  });\r\n  return resp;\r\n};\r\n\r\n/**\r\n * Http Fetch Request GET Method\r\n * @param {String} uri\r\n * @param {Object} header\r\n */\r\nconst httpGet = async (uri, header = {}) => {\r\n  let resp = await fetch(`${apiDomain}${uri}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      ...header,\r\n      Authorization: `Bearer ${apiKey}`,\r\n      \"content-type\": \"application/json\"\r\n    }\r\n  });\r\n  return resp;\r\n};\r\n\r\nexport { httpGet, httpPost };\r\n","import { fork, takeEvery, put, call } from \"redux-saga/effects\";\r\nimport { httpGet } from \"../../Helper/HttpFetch\";\r\nimport { COUNTRY_LOADED, setCountry } from \"./countries-action\";\r\nfunction* __getCountries() {\r\n  try {\r\n    const uri = \"/3/configuration/countries\";\r\n    const response = yield call(httpGet, uri);\r\n    if (response.status == 200) {\r\n      const json = yield call([response, response.json]);\r\n      yield put(setCountry(json));\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport function* getCountries() {\r\n  yield takeEvery(COUNTRY_LOADED, __getCountries);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield fork(getCountries);\r\n}\r\n","import { all, fork, takeEvery, put, call } from \"redux-saga/effects\";\r\nimport { httpGet } from \"../../Helper/HttpFetch\";\r\nimport { GENRE_LOADED, setGenreMovie, setGenreTv } from \"./genres-action\";\r\n\r\nfunction* __getGenre() {\r\n  try {\r\n    const uriMovie = \"/3/genre/movie/list\";\r\n    const uriTv = \"/3/genre/tv/list\";\r\n    const [respMovie, respTv] = yield all([\r\n      call(httpGet, uriMovie),\r\n      call(httpGet, uriTv)\r\n    ]);\r\n\r\n    //Check if promise all each receive 200 status\r\n    if (respMovie.status === 200) {\r\n      const response = yield call([respMovie, respMovie.json]);\r\n      yield put(setGenreMovie(response.genres));\r\n    }\r\n\r\n    if (respTv.status === 200) {\r\n      const response = yield call([respTv, respTv.json]);\r\n      yield put(setGenreTv(response.genres));\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport function* getGenre() {\r\n  yield takeEvery(GENRE_LOADED, __getGenre);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield fork(getGenre);\r\n}\r\n","import { all, fork, takeEvery, put, call } from \"redux-saga/effects\";\r\nimport {\r\n  MOVIE_LOADED,\r\n  setBannerMovie,\r\n  setSuggestionMovie,\r\n  setLatestMovie,\r\n  setLoadingLoaded\r\n} from \"./movies-action\";\r\nimport { httpGet } from \"../../Helper/HttpFetch\";\r\nimport moment from \"moment\";\r\n\r\nfunction* __getMovie() {\r\n  try {\r\n    let page = 0;\r\n    const date = moment().format(\"YYYY-MM-DD\");\r\n    const year = moment().format(\"YYYY\");\r\n    yield put(setLoadingLoaded(true));\r\n    while (true) {\r\n      const uriDiscover = \"/3/discover/movie?\";\r\n      const uriGetBanner = `${uriDiscover}page=${page}&sort_by=popularity.desc&release_date.gte=${date}&year=${year}`;\r\n      const uriGetSuggestion = `${uriDiscover}page=${page}&sort_by=vote_average.desc&release_date.gte=${date}&year=${year}`;\r\n      const uriGetLatest = `${uriDiscover}page=${page}&sort_by=vote_average.desc&release_date.gte=${date}&year=${year}`;\r\n\r\n      const [respBanner, respSuggestion, respLatest] = yield all([\r\n        call(httpGet, uriGetBanner),\r\n        call(httpGet, uriGetSuggestion),\r\n        call(httpGet, uriGetLatest)\r\n      ]);\r\n\r\n      // Set to state only if receive status 200\r\n      if (respBanner.status === 200) {\r\n        const response = yield call([respBanner, respBanner.json]);\r\n        //Set only max 6 movie\r\n        const max = 0;\r\n        const arr = [];\r\n        for (let i = 0; i < max; i++) {\r\n          if (max > 6) break;\r\n          response.map((item, index) => {\r\n            if (item && item.backdrop_path) {\r\n              arr.push(item);\r\n              max++;\r\n            }\r\n          });\r\n        }\r\n        yield put(setBannerMovie(arr));\r\n      }\r\n\r\n      // Set all suggestion\r\n      if (respSuggestion.status === 200) {\r\n        const response = yield call([respSuggestion, respSuggestion.json]);\r\n        yield put(setSuggestionMovie(response.results));\r\n      }\r\n\r\n      // Set latest movie\r\n      if (respLatest.status === 200) {\r\n        const response = yield call([respLatest, respLatest.json]);\r\n        yield put(setLatestMovie(response.results));\r\n        yield put(setLoadingLoaded(false));\r\n      }\r\n\r\n      page++;\r\n      if (page > 5) {\r\n        break;\r\n      }\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport function* getMovie() {\r\n  yield takeEvery(MOVIE_LOADED, __getMovie);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield fork(getMovie);\r\n}\r\n","import { all, fork } from \"redux-saga/effects\";\r\nimport SagaCounties from \"../Modules/Countries/countries-saga\";\r\nimport SagaGenres from \"../Modules/Genres/genres-saga\";\r\nimport SagaMovies from \"../Modules/Movies/movies-saga\";\r\nexport default function*() {\r\n  yield all([fork(SagaCounties), fork(SagaGenres), fork(SagaMovies)]);\r\n}\r\n","import { createBrowserHistory } from \"history\";\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport { routerMiddleware } from \"connected-react-router\";\r\nimport reducer from \"../RootReducers\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"../RootSagas\";\r\nexport const history = createBrowserHistory();\r\n\r\nconst composeEnhancers = compose;\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst routeMiddleware = routerMiddleware(history);\r\nconst middlewares = [sagaMiddleware];\r\nif (process.env.NODE_ENV === `development`) {\r\n  const { logger } = require(`redux-logger`);\r\n\r\n  middlewares.push(logger);\r\n}\r\n\r\nexport default function configureStore(initState) {\r\n  const store = createStore(\r\n    reducer(history),\r\n    initState,\r\n    composeEnhancers(\r\n      applyMiddleware(...middlewares),\r\n      applyMiddleware(routeMiddleware)\r\n    )\r\n  );\r\n  sagaMiddleware.run(rootSaga);\r\n  if (module.hot) {\r\n    module.hot.accept(\"../RootReducers/index\", () => {\r\n      const nextReducer = require(\"../RootReducers/index\");\r\n      store.replaceReducer(nextReducer);\r\n    });\r\n  }\r\n  return store;\r\n}\r\n","import React, { Suspense, lazy } from \"react\";\r\nimport { Provider, ReactReduxContext } from \"react-redux\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport { ConnectedRouter } from \"connected-react-router\";\r\nimport configureStore, { history } from \"./Store\";\r\nimport { location } from \"./Env\";\r\nimport \"./CoreScss/global.scss\";\r\n/**\r\n * Do to test unit need to exports of Component\r\n */\r\nexport const HeaderComponent = lazy(() => import(\"./Header/header-component\"));\r\nexport const FooterComponent = lazy(() => import(\"./Footer/footer-component\"));\r\nexport const ConnectedHome = lazy(() => import(\"./Modules/Home\"));\r\nexport const ConnectedGenres = lazy(() => import(\"./Modules/Genres\"));\r\nexport const ConnectedCountries = lazy(() => import(\"./Modules/Countries\"));\r\nexport const ConnectedMovies = lazy(() => import(\"./Modules/Movies\"));\r\nexport const ConnectedTvSeries = lazy(() => import(\"./Modules/TvSeries\"));\r\nexport const ConnectedSearch = lazy(() => import(\"./Modules/Search\"));\r\n\r\nconst store = configureStore();\r\n\r\nconst routeMap = [\r\n  {\r\n    id: \"root\",\r\n    path: `${location}/`,\r\n    component: null,\r\n    parent: true\r\n  },\r\n  {\r\n    id: \"home\",\r\n    path: `${location}/home`,\r\n    component: ConnectedHome,\r\n    parent: false\r\n  },\r\n  {\r\n    id: \"genre\",\r\n    path: `${location}/genre`,\r\n    component: ConnectedGenres,\r\n    parent: false\r\n  },\r\n  {\r\n    id: \"country\",\r\n    path: `${location}/country`,\r\n    component: ConnectedCountries,\r\n    parent: false\r\n  },\r\n  {\r\n    id: \"movie\",\r\n    path: `${location}/movie`,\r\n    component: ConnectedMovies,\r\n    parent: false\r\n  },\r\n  {\r\n    id: \"tvserie\",\r\n    path: `${location}/tvserie`,\r\n    component: ConnectedTvSeries,\r\n    parent: false\r\n  },\r\n  {\r\n    id: \"search\",\r\n    path: `${location}/search`,\r\n    component: ConnectedSearch,\r\n    parent: false\r\n  }\r\n];\r\n\r\nfunction MainApp({ history, context }) {\r\n  return (\r\n    <ConnectedRouter history={history} context={context}>\r\n      <Suspense fallback={<div>Loading App...</div>}>\r\n        <>\r\n          <HeaderComponent />\r\n          <Switch>\r\n            {routeMap.map(item => {\r\n              const RouteComponent = item.component;\r\n              if (item.parent) {\r\n                return (\r\n                  <Route\r\n                    key={item.id}\r\n                    exact\r\n                    path={item.path}\r\n                    render={() => <Redirect to={`${location}/home`} />}\r\n                  />\r\n                );\r\n              } else {\r\n                return (\r\n                  <Route\r\n                    key={item.id}\r\n                    path={item.path}\r\n                    render={({ staticContext, ...props }) => (\r\n                      <RouteComponent {...props} />\r\n                    )}\r\n                  />\r\n                );\r\n              }\r\n            })}\r\n          </Switch>\r\n          <FooterComponent />\r\n        </>\r\n      </Suspense>\r\n    </ConnectedRouter>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store} context={ReactReduxContext}>\r\n      <MainApp history={history} context={ReactReduxContext} />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport { connectRouter } from \"connected-react-router\";\r\nimport Countries from \"../Modules/Countries/countries-reducer\";\r\nimport Genres from \"../Modules/Genres/genres-reducers\";\r\nimport Movies from \"../Modules/Movies/movies-reducer\";\r\n\r\nexport default history =>\r\n  combineReducers({\r\n    router: connectRouter(history),\r\n    Countries,\r\n    Genres,\r\n    Movies\r\n  });\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}